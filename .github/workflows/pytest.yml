name: PyTest
on:
  pull_request:
    types: [opened]
  push:

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - uses: getong/mariadb-action@v1.1
        with:
          mariadb version: '10.6.4'
          mysql database: 'yepcord_test'
          mysql root password: ${{ secrets.DB_PASS }}

      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping --host=127.0.0.1 --password=${{ secrets.DB_PASS }} --silent; do
            sleep 1
          done

      - name: Setup database
        run: |
          mysql -h 127.0.0.1 -u root -p${{ secrets.DB_PASS }} yepcord_test < database.sql

      - name: Install dependencies
        run: |
          python -m pip install --upgrade wheel
          python -m pip install -r requirements.txt
          python -m pip install pytest pytest-asyncio pytest-cov

      - name: Run test suite for core
        run: |
          pytest --cov-report=xml --cov-append --cov=src/yepcord --disable-warnings tests/test_core.py
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: yepcord_test
          KEY: ${{ secrets.KEY }}

      - name: Reinstall database
        run: |
          mysql -h 127.0.0.1 -u root -p${{ secrets.DB_PASS }} -e "DROP DATABASE IF EXISTS yepcord_test;"
          mysql -h 127.0.0.1 -u root -p${{ secrets.DB_PASS }} -e "CREATE DATABASE yepcord_test;"
          mysql -h 127.0.0.1 -u root -p${{ secrets.DB_PASS }} yepcord_test < database.sql

      - name: Run test suite for http
        run: |
          pytest --cov-report=xml --cov-append --cov=src/rest_api --disable-warnings tests/test_http.py
        env:
          DB_HOST: 127.0.0.1
          DB_USER: root
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: yepcord_test
          KEY: ${{ secrets.KEY }}
          TENOR_KEY: ${{ secrets.TENOR_KEY }}

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}